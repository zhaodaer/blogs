(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{478:function(t,_,v){"use strict";v.r(_);var l=v(2),i=Object(l.a)({},(function(){var t=this,_=t._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"二、数据结构和算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二、数据结构和算法"}},[t._v("#")]),t._v(" 二、"),_("RouterLink",{attrs:{to:"/blogs/数据结构和算法.html"}},[t._v("数据结构和算法")])],1),t._v(" "),_("blockquote",[_("p",[t._v("算法虐我千百遍，我待算法如初恋"),_("br"),t._v("\n这些算法全部自己敲一遍：")])]),t._v(" "),_("h3",{attrs:{id:"大纲"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#大纲"}},[t._v("#")]),t._v(" 大纲")]),t._v(" "),_("blockquote",[_("ul",[_("li",[_("a",{attrs:{href:"https://py3.io/doc/python/quickstart.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("链表"),_("OutboundLink")],1)]),t._v(" "),_("li",[t._v("数组\n"),_("ul",[_("li",[t._v("数组数列问题")]),t._v(" "),_("li",[t._v("requests使用多IP请求")]),t._v(" "),_("li",[_("a",{attrs:{href:"code/MultiThread_Template.py"}},[t._v("Python多线程模板")])])])]),t._v(" "),_("li",[t._v("队列\n"),_("ul",[_("li",[t._v("队列")]),t._v(" "),_("li",[t._v("堆栈")])])]),t._v(" "),_("li",[t._v("哈希表 HashTable\n"),_("ul",[_("li",[t._v("散列函数")]),t._v(" "),_("li",[t._v("碰撞解决")])])]),t._v(" "),_("li",[t._v("字符串算法\n"),_("ul",[_("li",[t._v("子串查找 "),_("RouterLink",{attrs:{to:"/blogs/9 Algorithms Job Interview/1 字符串.html"}},[t._v("字符串常见题目参考这里")])],1),t._v(" "),_("li",[t._v("BF算法")]),t._v(" "),_("li",[t._v("KMP算法")]),t._v(" "),_("li",[t._v("BM算法")]),t._v(" "),_("li",[t._v("正则表达式")]),t._v(" "),_("li",[t._v("数据压缩")]),t._v(" "),_("li",[t._v("排序")])])]),t._v(" "),_("li",[_("RouterLink",{attrs:{to:"/blogs/4 Tree/"}},[t._v("树")]),t._v(" "),_("ul",[_("li",[t._v("二叉树  "),_("RouterLink",{attrs:{to:"/blogs/6 Sort/"}},[t._v("快速排序")]),t._v("就是个二叉树的前序遍历，归并排序就是个二叉树的后序遍历")],1),t._v(" "),_("li",[_("RouterLink",{attrs:{to:"/blogs/4 Tree/2-二叉查找树/二叉查找树.html"}},[t._v("二叉查找树BST")]),t._v("  有序的二叉树，中序遍历结果是递增的")],1),t._v(" "),_("li",[_("RouterLink",{attrs:{to:"/blogs/4 Tree/3-平衡树AVL/"}},[t._v("平衡二叉树 AVL树")]),t._v("   绝对平衡二叉树；")],1),t._v(" "),_("li",[_("RouterLink",{attrs:{to:"/blogs/4 Tree/9-红黑树 R-B tree/红黑树.html"}},[t._v("红黑树")]),t._v("  弱平衡二叉树；使用广泛")],1),t._v(" "),_("li",[_("RouterLink",{attrs:{to:"/blogs/4 Tree/7-B树/B树.html"}},[t._v("B树")])],1),t._v(" "),_("li",[_("RouterLink",{attrs:{to:"/blogs/4 Tree/7-B树/B+树.html"}},[t._v("B+树")]),t._v("  mysql 索引使用 B+树 的数据结构")],1),t._v(" "),_("li",[_("RouterLink",{attrs:{to:"/blogs/4 Tree/4-字典树Trie/"}},[t._v("字典树trie")]),t._v(" 字典树也叫前缀树，单词查找树")],1),t._v(" "),_("li",[_("RouterLink",{attrs:{to:"/blogs/4 Tree/8-堆/堆.html"}},[t._v("二叉堆")])],1),t._v(" "),_("li",[_("RouterLink",{attrs:{to:"/blogs/4 Tree/5-伸展树/伸展树.html"}},[t._v("伸展树")])],1),t._v(" "),_("li",[_("RouterLink",{attrs:{to:"/blogs/4 Tree/6-后缀树/后缀树.html"}},[t._v("后缀树")])],1),t._v(" "),_("li",[t._v("斐波那契堆(Fibonacci Heap)")]),t._v(" "),_("li",[t._v("最优二叉树(赫夫曼树)")])])],1),t._v(" "),_("li",[_("RouterLink",{attrs:{to:"/blogs/5 Graph/"}},[t._v("图的算法")]),t._v(" "),_("ul",[_("li",[t._v("图的存储结构和基本操作（建立，遍历，删除节点，添加节点）")]),t._v(" "),_("li",[t._v("最小生成树")]),t._v(" "),_("li",[t._v("拓扑排序")]),t._v(" "),_("li",[t._v("关键路径")]),t._v(" "),_("li",[t._v("最短路径: Floyd,Dijkstra,bellman-ford,spfa")])])],1),t._v(" "),_("li",[_("RouterLink",{attrs:{to:"/blogs/6 Sort/"}},[t._v("排序算法")])],1),t._v(" "),_("li",[t._v("交换排序算法\n"),_("ul",[_("li",[t._v("冒泡排序")]),t._v(" "),_("li",[t._v("插入排序")]),t._v(" "),_("li",[t._v("选择排序")]),t._v(" "),_("li",[t._v("希尔排序")]),t._v(" "),_("li",[t._v("快排")]),t._v(" "),_("li",[t._v("归并排序")]),t._v(" "),_("li",[t._v("堆排序")])])]),t._v(" "),_("li",[t._v("线性排序算法\n"),_("ul",[_("li",[t._v("桶排序")])])]),t._v(" "),_("li",[_("RouterLink",{attrs:{to:"/blogs/7 Search/"}},[t._v("查找算法")]),t._v(" "),_("ul",[_("li",[t._v("哈希表： O(1)  "),_("RouterLink",{attrs:{to:"/3 Hash Table/"}},[t._v("hashtable实现参考这里")])],1),t._v(" "),_("li",[t._v("有序表查找：二分查找")]),t._v(" "),_("li",[t._v("顺序表查找：顺序查找, 复杂度O(N)")]),t._v(" "),_("li",[t._v("分块查找： 块内无序，块之间有序；可以先二分查找定位到块，然后再到"),_("code",[t._v("块")]),t._v("中顺序查找")]),t._v(" "),_("li",[t._v("动态查找:  二叉排序树，AVL树，B- ，B+（这里之所以叫 "),_("code",[t._v("动态查找表")]),t._v("，是因为表结构是查找的过程中动态生成的）")])])],1),t._v(" "),_("li",[_("RouterLink",{attrs:{to:"/blogs/8 Algorithms Analysis/"}},[t._v("算法设计思想")]),t._v(" "),_("ul",[_("li",[_("RouterLink",{attrs:{to:"/blogs/8 Algorithms Analysis/递归.html"}},[t._v("递归")])],1),t._v(" "),_("li",[_("RouterLink",{attrs:{to:"/blogs/8 Algorithms Analysis/分治算法.html"}},[t._v("分治算法")])],1),t._v(" "),_("li",[_("RouterLink",{attrs:{to:"/blogs/8 Algorithms Analysis/动态规划.html"}},[t._v("动态规划")])],1),t._v(" "),_("li",[_("RouterLink",{attrs:{to:"/blogs/8 Algorithms Analysis/回溯法.html"}},[t._v("回溯法")])],1),t._v(" "),_("li",[_("RouterLink",{attrs:{to:"/blogs/8 Algorithms Analysis/迭代法.html"}},[t._v("迭代法")])],1),t._v(" "),_("li",[_("RouterLink",{attrs:{to:"/blogs/8 Algorithms Analysis/穷举搜索法.html"}},[t._v("穷举搜索法")])],1),t._v(" "),_("li",[_("RouterLink",{attrs:{to:"/blogs/8 Algorithms Analysis/贪心算法.html"}},[t._v("贪心算法")])],1)])],1),t._v(" "),_("li",[_("RouterLink",{attrs:{to:"/blogs/9 Algorithms Job Interview/"}},[t._v("面试算法题目")]),t._v(" "),_("br"),t._v(" "),_("br"),t._v(" "),_("br")],1)])]),t._v(" "),_("blockquote",[_("ul",[_("li",[_("ul",[_("li",[_("br")])])])])]),t._v(" "),_("h3",{attrs:{id:"_1、链表"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1、链表"}},[t._v("#")]),t._v(" 1、链表")]),t._v(" "),_("ul",[_("li",[t._v("顺序存储结构")]),t._v(" "),_("li",[t._v("单链表")]),t._v(" "),_("li",[t._v("静态链表")]),t._v(" "),_("li",[t._v("循环链表")]),t._v(" "),_("li",[t._v("双向链表")])]),t._v(" "),_("h3",{attrs:{id:"_2、栈与队列"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2、栈与队列"}},[t._v("#")]),t._v(" 2、栈与队列")]),t._v(" "),_("p",[t._v("二者都是特殊的线性表")]),t._v(" "),_("ul",[_("li",[_("p",[_("strong",[t._v("栈")]),t._v("（仅在表尾进行插入和删除操作）：")]),t._v(" "),_("p",[t._v("​\t栈的顺序存储结构、两栈共享空间")]),t._v(" "),_("p",[t._v("​\t栈的链式存储结构（链栈）")]),t._v(" "),_("p",[_("em",[t._v("应用")]),t._v("：递归函数（斐波那契数列）、四则运算表达式求值（后缀表达式）")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("队列")]),t._v("（只允许在一端插入，另一端删除）：")])])]),t._v(" "),_("p",[t._v("​\t\t\t\t队列的顺序存储结构")]),t._v(" "),_("p",[t._v("​\t\t\t\t循环队列的顺序存储结构")]),t._v(" "),_("p",[t._v("​\t\t\t\t队列的链式存储结构")]),t._v(" "),_("h3",{attrs:{id:"_3、串"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3、串"}},[t._v("#")]),t._v(" 3、串")]),t._v(" "),_("h3",{attrs:{id:"_4、树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4、树"}},[t._v("#")]),t._v(" 4、树")]),t._v(" "),_("p"),t._v(" "),_("p"),t._v(" "),_("p"),t._v(" "),_("h3",{attrs:{id:"cordic算法原理-圆坐标系旋转原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cordic算法原理-圆坐标系旋转原理"}},[t._v("#")]),t._v(" CORDIC算法原理-圆坐标系旋转原理")])])}),[],!1,null,null,null);_.default=i.exports}}]);